#pragma once
#include <iostream>
#include "Character.h"

struct Map_simbol
{
	enum Simbol_int { 
		/// <summary>
		/// Стена, числовое значение в массиве: 0
		/// </summary>
		Wall_int = 0,

		/// <summary>
		/// Переход, числовое значение в массиве: 8
		/// </summary>
		Gate_int = 8,

		/// <summary>
		/// Не освещенная область, числовое значение в массиве: 1
		/// </summary>
		Dark_area_int = 1,

		/// <summary>
		/// Освещенная область, числовое значение в массиве: 4
		/// </summary>
		Light_area_int = 4,

		/// <summary>
		/// Игрок, числовое значение в массиве: 0
		/// </summary>
		Player_int = 3,

		/// <summary>
		/// Враг, числовое значение в массиве: 5
		/// </summary>
		Enemy_int = 5,

		/// <summary>
		/// Сохранение, числовое значение в массиве: 9
		/// </summary>
		Save_int = 9
	};

	enum Simbol {
		/// <summary>
		/// Стена, символ: #
		/// </summary>
		Wall = 35, 

		/// <summary>
		/// Переход, символ: G
		/// </summary>
		Gate = 71,

		/// <summary>
		/// Не освещенная область, символ: *
		/// </summary>
		Dark_area = 42, 

		/// <summary>
		/// Освещенная область, символ: ' '
		/// </summary>
		Light_area = 32, 

		/// <summary>
		/// Игрок, символ: Р
		/// </summary>
		Player = 80, 

		/// <summary>
		/// Враг, символ: Е
		/// </summary>
		Enemy = 69,

		/// <summary>
		/// Сохранение, символ: S
		/// </summary>
		Save = 83
	};

	/*

	// символ стены -
	char Simbol_wall = '#';
	// символ стены (цифра 0)
	int const Int_Simbol_wall = 0;

	// символ темной области-
	char Simbol_dark_area = '*';
	// символ темной области (цифра 1)
	int const Int_Simbol_dark_area = 1;

	// символ игрока-
	char Simbol_player = 'P';
	// символ игрока (цифра 2)
	int const Int_Simbol_player = 3;

	// символ светлой области-
	char Simbol_light_area = ' ';
	// символ светлой области (цифра 3)
	int const Int_Simbol_light_area = 4;

	// символ врага-
	char Simbol_enemy = 'E';
	// символ врага (цифра 4)
	int const Int_Simbol_enemy = 5;

	// символ сохранения
	char Simbol_save = 'S';
	// символ сохранения (цифра 5)
	int const Int_Simbol_save = 9;

	// символ врат-
	char Simboi_gate = 'G';
	// символ врат (цифра 6)
	int const Int_Simboi_gate = 8;

	//*/
};

struct Drop// предмет который можно найти на карте
{
	// есть ли рядом предмет
	bool Bl_Drop_Item = false;

	std::string Name_Drop_Item;
	//порядковый номер вещи (числовое представление)
	int Number_Drop_Item;
	//порядковый номер вещи (словесное представление)
	std::string Name_Number_Drop_Item;

	int Int_Rare;// класс редкости (1 - обычная, 2 - не обычная, 3 - редкая, 4 - легендарная)
	std::string Name_Rare_Drop_Item;// класс редкости (1 - обычная, 2 - не обычная, 3 - редкая, 4 - легендарная) (словесное представление)
};

struct Village
{
	/// <summary>
	/// возможно вернуться в деревню
	/// </summary>
	bool Return_village = false;

	/// <summary>
	/// Область поселения в которой находится игок (0 - за пределами поселения, 1 - ворота, 2 - центральный район)
	/// </summary>
	int Village_region = 1;

	/// <summary>
	/// поселение (область возле ворот) (регион 1)
	/// </summary>
	int tileMap_village_gate_area[25][51] = {
	  {0,8,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	  {0,4,0,4,4,4,0,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,0,0,0,4,4,0,4,4,4,4,4,0,4,4,4,4,0,4,4,4,0,4,4,4,4,0},
	  {0,4,0,4,4,4,0,4,0,4,0,0,0,0,0,4,4,4,4,4,4,0,4,4,4,0,0,0,4,4,4,0,4,4,4,4,4,0,4,4,0,4,4,4,4,4,0,4,4,4,0},
	  {0,4,4,0,4,0,4,4,0,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,0,0,0,0,4,4,4,4,4,0,4,4,4,0},
	  {0,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,0,4,4,4,4,4,0,4,4,4,0},
	  {0,0,0,0,4,0,0,0,4,4,0,4,4,4,0,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,0,0,8,0,0,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,8,8,8,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,0},
	  {0,4,4,4,4,4,0,0,4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,0},
	  {0,4,4,4,4,4,0,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0},
	  {0,4,4,4,4,4,0,0,4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8},
	  {0,4,4,4,4,4,4,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,0,4,4,4,4,4,0,4,4,4,4,4,4,8},
	  {0,0,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,0,4,4,4,4,4,4,0,4,4,0,4,4,4,4,0,4,0,4,4,4,4,4,0},
	  {0,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,4,4,4,4,0,0,0,0,4,4,4,0,4,4,4,4,0},
	  {0,4,4,4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,0},
	  {0,4,4,4,4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,8},
	  {0,4,4,4,4,4,8,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,8,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,0},
	  {0,0,4,4,4,4,0,0,0,0,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,0},
	  {0,4,0,4,4,4,0,4,4,0,4,4,4,4,4,0,0,0,0,0,4,4,4,4,0,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0},
	  {0,4,4,0,0,0,4,4,4,4,0,4,4,4,4,0,4,4,4,4,4,4,4,4,0,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,0,0,0,0,4,4,4,4,4,4,4,4,4,4,0,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	};

	/// <summary>
	/// поселение (центральный регион) (регион 2)
	/// </summary>
	int tileMap_village_central_region[25][51] = {
	  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {8,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0},
	  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	};
};

struct World
{
	int Int_Current_World; // нынешний мир (число)

	std::string Current_World;// нынешний мир 

	int Int_Last_World;// мир в который осуществляется переход (число)

	std::string Last_World;// мир в который осуществляется переход

	/// <summary>
	/// выбор следующего мира/выдача разрешения на переход (Passage -> true)
	/// </summary>
	void Next_world(Character& player);

	/// <summary>
	/// переход в следующий мир
	/// </summary>
	void Moving_next_world(Character& player);

	/// <summary>
	/// сохранение изменений в игровом мире (true - запустить функцию: void Saving_World)
	/// </summary>
	bool Save_game_world = false;

	/// <summary>
	/// Запись 1го из 10ти миров в текущий
	/// </summary>
	void Choice_World(Character& player);

	/// <summary>
	/// Запись текущего мира в 1 из 10ти миров
	/// </summary>
	void Saving_World();

	bool Load_save = false;//true - возможно сохранение

	/// <summary>
	/// Разрешение на переход (true - переход разрешен)
	/// </summary>
	bool Passage = false;

	static constexpr int Cols = 51; // x 
	static constexpr int Rows = 25; // y 

	// все миры

	int tileMap_west_1[Rows][Cols];// запад (1)
	void Build_map_west_1();

	int tileMap_west_north_2[Rows][Cols];// запад / север (2)
	void Build_map_west_north_2();

	int tileMap_north_1[Rows][Cols];// север (3)
	void Build_map_north_1();

	int tileMap_north_east_2[Rows][Cols];// север / восток (4)
	void Build_map_north_east_2();

	int tileMap_east_1[Rows][Cols];// восток (5)
	void Build_map_east_1();

	int tileMap_east_south_2[Rows][Cols];// восток / юг (6)
	void Build_map_east_south_2();

	int tileMap_south_1[Rows][Cols];// юг (7)
	void Build_map_south_1();

	int tileMap_south_west_2[Rows][Cols];// юг / запад (8)
	void Build_map_south_west_2();

	int tileMap_centre_0[Rows][Cols];// центер (9)
	void Build_map_centre_0();

	int tileMap[Rows][Cols];// текущий мир

	/// <summary>
	/// структура с информацией о символах и их представлении
	/// </summary>
	Map_simbol attr_simbol;


	Drop Drop_attr;

	/// <summary>
	/// структура с информацией связанной с поселением
	/// </summary>
	Village village;
};

class Map
{
public:
	//создание карты
	Map();

	/// <summary>
	/// пероначальное заполнение массивов карт
	/// </summary>
	void Map_set();

	/// <summary>
	/// функция отрисовки карты
	/// </summary>
	void PrintMap(Character& player);

	/// <summary>
	/// функция отрисовки карты в исходном варианте
	/// </summary>
	void PrintMapSetting(Character& player);

	/// <summary>
	/// функция перемещения персонажа
	/// </summary>
	/// <param name="direction - сторона перемещения 1, 2, 3, 4 (0 - персонаж остается на месте)"></param>
	void InsertPlayerIntoMap(Character& player, int direction = 0);

	/// <summary>
	/// проверка на точку сохранения
	/// </summary>
	/// <param name="Cordinate_X"></param>
	/// <param name="Cordinate_Y"></param>
	/// <returns> возвращаемый параметр: bool </returns>
	bool Checking_save(int Cordinate_X, int Cordinate_Y);

	/// <summary>
	/// настройка отображения символов
	/// </summary>
	/// <returns> возвращаемый параметр: char </returns>
	char Simbol();

private:

	/// <summary>
	/// отслеживание стороны перемещения
	/// </summary>
	/// <param name="direction - 1(запад), 2(север), 3(восток), 4(юг)"></param>
	void Tracking_Move(int direction);

	/// <summary>
	/// затерание позиции прошлого хода
	/// </summary>
	/// <param name="Cordinate_X"></param>
	/// <param name="Cordinate_Y"></param>
	void Erasing_last_step(int Cordinate_X, int Cordinate_Y);

	/// <summary>
	/// функция обзора карты
	/// </summary>
	/// <param name="Cordinate_X"></param>
	/// <param name="Cordinate_Y"></param>
	void MapOverview(int Cordinate_X, int Cordinate_Y);

public:
	/// <summary>
	/// структура содержащая информацию связанную с картой
	/// </summary>
	World attr_World;

private:

	Character player;

	int Last_Position_X = 0; //координата прошлого шага персонажа Х
	int Last_Position_Y = 0; //координата прошлого шага персонажа Y

	int Current_Position_X; //текущие координаты персонажа Х
	int Current_Position_Y; //текущие координаты персонажа Y

	int CordinateNextStepX; // координата следующего шага персонажа Х
	int CordinateNextStepY; // координата следующего шага персонажа Y


};